{"version":3,"names":[],"mappings":"","sources":["field-length-alert.js"],"sourcesContent":["/********************************\n\tName: WordPress Field Length Alert\n\tUsage:\n\n\tBasic:\n\twindow.TenUp.fieldLengthAlert( '#title' );\n\n\tAllthethings:\n\twindow.TenUp.fieldLengthAlert( {\n\t\ttarget: '#title', // ID of field container\n\t\terror_threshold: 65,\n\t\twarn_threshold: 55\n\t}, function() {\n\t\tconsole.log( 'Amazing callback function!' );\n\t} );\n********************************/\n\n( function() {\n\t'use strict';\n\n\t// Define global TenUp object if it doesn't exist\n\tif ( 'object' !== typeof window.TenUp ) {\n\t\twindow.TenUp = {};\n\t}\n\n\t// This is our global alert index to keep unique ids\n\tvar alertIndex = 0,\n\t// declare once - we'll use it later.\n\t\talertTarget = [],\n\t\t// Simple iterator for reuse\n\t\tforEach = function( array, callback, scope ) {\n\t\t\tfor ( var i = 0, imax = array.length; i < imax; i++ ) {\n\t\t\t\tcallback.call( scope, i, array[i] ); // passes back stuff we need\n\t\t\t}\n\t\t},\n\t\tacceptedTypes = [\n\t\t\t'text',\n\t\t\t'textarea'\n\t\t];\n\n\t// Rules out non-inputs and ones that don't make sense to limit.\n\tfunction isLimitable( input ) {\n\t\tif ( input.tagName === 'INPUT' ) {\n\t\t\tif ( acceptedTypes.indexOf( input.type ) > -1 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\twindow.TenUp.fieldLengthAlert = function( options, callback ) {\n\t\tif ( 'undefined' === typeof options ) {\n\t\t\t// Bail if we don't have any options\n\t\t\treturn;\n\t\t} else if ( 'string' === typeof options ) {\n\t\t\t// Allow passing of only a target as string\n\t\t\tvar target = options;\n\t\t\toptions = { 'target': target};\n\t\t} else if ( 'undefined' === typeof options.target ) {\n\t\t\t// Bail if we have options but don't have a target defined\n\t\t\treturn;\n\t\t}\n\n\t\tif ( 'string' === typeof options.target ) {\n\t\t\talertTarget = document.querySelectorAll( options.target );\n\t\t} else if ( Array.isArray( options.target ) ) {\n\t\t\tforEach( options.target, function( index, value ) {\n\t\t\t\tvar targets = document.querySelectorAll( value );\n\t\t\t\tArray.prototype.push.apply( alertTarget, targets );\n\t\t\t} );\n\t\t}\n\n\t\tif ( ! alertTarget ) {\n\t\t\treturn;\n\t\t}\n\n\t\talertIndex++;\n\n\t\tfunction update_title_count( field, spanWrap, options ) {\n\t\t\t// set some defaults\n\t\t\tvar warnThreshold  = options.warn_threshold || 55,\n\t\t\t\terrorThreshold = options.error_threshold || 65,\n\t\t\t\tdirection      = options.direction || 'down',\n\t\t\t\tfieldLength    = isNaN( parseInt( field.value.length ) ) ? 0 : parseInt( field.value.length ),\n\t\t\t\talertEl        = spanWrap.querySelector( '.field-length-alert' ),\n\t\t\t\tcountEl        = spanWrap.querySelector( '.field-length-alert-count' );\n\n\t\t\t// handle count direction\n\t\t\tif ( direction !== 'up' ) {\n\t\t\t\tfieldLength = errorThreshold - fieldLength;\n\t\t\t}\n\n\t\t\tcountEl.textContent = fieldLength.toString();\n\n\t\t\t// reset classes before changing\n\t\t\talertEl.classList.remove( '-warn' );\n\t\t\talertEl.classList.remove( '-error' );\n\n\t\t\t// conditionally highlight the length count\n\t\t\tif ( direction !== 'up' ) {\n\t\t\t\tif ( fieldLength <= 0 ) {\n\t\t\t\t\talertEl.classList.remove( '-warn' );\n\t\t\t\t\talertEl.classList.add( '-error' );\n\t\t\t\t} else if ( fieldLength <= ( errorThreshold - warnThreshold ) ) {\n\t\t\t\t\talertEl.classList.add( '-warn' );\n\t\t\t\t\talertEl.classList.remove( '-error' );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( fieldLength >= errorThreshold ) {\n\t\t\t\t\talertEl.classList.remove( '-warn' );\n\t\t\t\t\talertEl.classList.add( '-error' );\n\t\t\t\t} else if ( fieldLength >= warnThreshold ) {\n\t\t\t\t\talertEl.classList.add( '-warn' );\n\t\t\t\t\talertEl.classList.remove( '-error' );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tforEach( alertTarget, function( index, value ) {\n\t\t\tvar field        = value,\n\t\t\t\tspanWrap     = document.createElement( 'span' ),\n\t\t\t\talertNode    = document.createElement( 'span' ),\n\t\t\t\tcountNode    = document.createElement( 'span' );\n\n\t\t\t\t// Make sure it makes sense to limit this element\n\t\t\tif ( ! isLimitable( field ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\talertNode.classList.add( 'field-length-alert' );\n\t\t\tcountNode.classList.add( 'field-length-alert-count' );\n\t\t\talertNode.appendChild( countNode );\n\n\t\t\tindex++;\n\n\t\t\t// Wrap in a span, as we need something to add the counter to\n\t\t\tspanWrap.setAttribute( 'id', 'wrap' + alertIndex + '-' + index );\n\t\t\tspanWrap.classList.add( 'alert-wrap' );\n\n\t\t\t// Make the span the same width and font size as the input\n\t\t\tvar cs = window.getComputedStyle( field, null );\n\t\t\tspanWrap.style.maxWidth = cs.getPropertyValue( 'width' );\n\t\t\talertNode.style.fontSize = cs.fontSize;\n\n\t\t\t// insert the span - just before the field\n\t\t\tfield.parentNode.insertBefore( spanWrap, field );\n\n\t\t\t// move the input into the span\n\t\t\tspanWrap.appendChild( field );\n\n\t\t\t// append the alert block\n\t\t\tspanWrap.appendChild( alertNode );\n\n\t\t\t// this is unlikely, but since we set a max-width..\n\t\t\twindow.onresize = function() {\n\t\t\t\t// reset width so responsive fields (like title) stay responsive\n\t\t\t\tspanWrap.style.maxWidth = '100%';\n\t\t\t\tspanWrap.style.maxWidth = cs.getPropertyValue( 'width' );\n\t\t\t};\n\n\t\t\t// add event listener\n\t\t\tfield.addEventListener( 'keyup', function() {\n\t\t\t\tupdate_title_count( field, spanWrap, options );\n\t\t\t} );\n\n\t\t\t// update the number once.\n\t\t\tupdate_title_count( field, spanWrap, options );\n\n\t\t} );\n\n\t\t// Execute the callback function\n\t\tif ( typeof callback === 'function' ) {\n\t\t\tcallback.call();\n\t\t}\n\t};\n\n\t// @TODO: These examples here for testing\n\tdocument.addEventListener( 'DOMContentLoaded', function() {\n\t\t/* Basic - ID\n\t\twindow.TenUp.fieldLengthAlert( '#title' );\n\t\t*/\n\n\n\t\t/* Less Basic - by type (this is crazy, don't do this in production!)\n\t\twindow.TenUp.fieldLengthAlert( 'input[type=text]' );\n\t\t*/\n\n\t\t/* Passing an array of selectors */\n\t\twindow.TenUp.fieldLengthAlert( {\n\t\t\ttarget: ['#title', '.newtag'], // array of fields\n\t\t\terror_threshold: 55,\n\t\t\twarn_threshold: 45\n\t\t} );\n\n\n\t\t/* Allthethings\n\t\twindow.TenUp.fieldLengthAlert( {\n\t\t\ttarget: '#title', // ID of field\n\t\t\terror_threshold: 55,\n\t\t\twarn_threshold: 45\n\t\t}, function() {\n\t\t\tconsole.log( 'Amazing callback function!' );\n\t\t} );\n\t\t*/\n\n\t} );\n\n} )();\n"],"file":"field-length-alert.js"}